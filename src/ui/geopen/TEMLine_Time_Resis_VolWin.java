/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.geopen;

import handler.geopen.TEMImageFileFilter;
import handler.geopen.TEMSourceData;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.JCheckBox;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.RectangleEdge;
import positionChart.geopen.Channels_Time_VoltChart;
import positionChart.geopen.InstallData;
import positionChart.geopen.TEMXLogAxis;

/**
 *
 * @author Administrator
 */
public class TEMLine_Time_Resis_VolWin extends javax.swing.JFrame {

    public TEMProcessingProgramWin frame;
    //时间抽道图表
    public Channels_Time_VoltChart channels_Time_VoltChart = null;
    private int chartChangeNum = 1;//0-VT\1-RT\2-RD

    /**
     * Creates new form TEMLine_Time_Resis_VolWin
     */
    public TEMLine_Time_Resis_VolWin(TEMProcessingProgramWin frame) {
        initComponents();
        this.frame = frame;
        //为timeList更改属性
        channels_Time_VoltChart = new Channels_Time_VoltChart(this);
        CheckListCellRenderer renderer = new CheckListCellRenderer();
        timeList.setCellRenderer(renderer);
        CheckListener lst = new CheckListener(timeList);
        timeList.addMouseListener(lst);
        timeList.addKeyListener(lst);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolbarPanel = new javax.swing.JPanel();
        lineToolBar = new javax.swing.JToolBar();
        jLabel12 = new javax.swing.JLabel();
        saveImageButton = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        changeChartButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        showProfileMapButton = new javax.swing.JButton();
        linePanel = new javax.swing.JPanel();
        lineSplitPanel = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        definedLinePanel = new javax.swing.JPanel();
        extractedChannelPanel = new javax.swing.JPanel();
        channel_time_voltSplitPane = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        time_volt_channelsPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        timeList = new javax.swing.JList();
        MenuBar = new javax.swing.JMenuBar();
        saveImageMenuItem = new javax.swing.JMenu();
        savePicMenuItem = new javax.swing.JMenuItem();
        EditMenu = new javax.swing.JMenu();
        changeChartMenuItem = new javax.swing.JMenuItem();
        showProfileMapMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(Toolkit.getDefaultToolkit().createImage(ClassLoader.getSystemResource("pic/geopen/GP.png")));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lineToolBar.setFloatable(false);
        lineToolBar.setRollover(true);

        jLabel12.setForeground(new java.awt.Color(204, 204, 204));
        jLabel12.setText(" ");
        lineToolBar.add(jLabel12);

        saveImageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/pictrue28.png"))); // NOI18N
        saveImageButton.setToolTipText("保存电压抽道剖面");
        saveImageButton.setFocusable(false);
        saveImageButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveImageButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageButtonActionPerformed(evt);
            }
        });
        lineToolBar.add(saveImageButton);

        jLabel14.setForeground(new java.awt.Color(204, 204, 204));
        jLabel14.setText("|");
        lineToolBar.add(jLabel14);

        changeChartButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/cycleRVD28.png"))); // NOI18N
        changeChartButton.setToolTipText("切换");
        changeChartButton.setFocusable(false);
        changeChartButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        changeChartButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        changeChartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeChartButtonActionPerformed(evt);
            }
        });
        lineToolBar.add(changeChartButton);

        jLabel13.setForeground(new java.awt.Color(204, 204, 204));
        jLabel13.setText("|");
        lineToolBar.add(jLabel13);

        showProfileMapButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/profiler28.png"))); // NOI18N
        showProfileMapButton.setToolTipText("电阻率剖面");
        showProfileMapButton.setFocusable(false);
        showProfileMapButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        showProfileMapButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        showProfileMapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showProfileMapButtonActionPerformed(evt);
            }
        });
        lineToolBar.add(showProfileMapButton);

        javax.swing.GroupLayout toolbarPanelLayout = new javax.swing.GroupLayout(toolbarPanel);
        toolbarPanel.setLayout(toolbarPanelLayout);
        toolbarPanelLayout.setHorizontalGroup(
            toolbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lineToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        toolbarPanelLayout.setVerticalGroup(
            toolbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lineToolBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        linePanel.setLayout(new java.awt.GridLayout(1, 0));

        lineSplitPanel.setDividerLocation(250);
        lineSplitPanel.setDividerSize(7);
        lineSplitPanel.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        lineSplitPanel.setResizeWeight(0.3);
        lineSplitPanel.setOneTouchExpandable(true);

        definedLinePanel.setLayout(new java.awt.GridLayout(1, 0));
        jScrollPane1.setViewportView(definedLinePanel);

        lineSplitPanel.setTopComponent(jScrollPane1);

        extractedChannelPanel.setLayout(new java.awt.GridLayout(1, 0));

        channel_time_voltSplitPane.setDividerSize(7);
        channel_time_voltSplitPane.setResizeWeight(1.0);
        channel_time_voltSplitPane.setOneTouchExpandable(true);

        time_volt_channelsPanel.setLayout(new java.awt.GridLayout(1, 0));
        jScrollPane2.setViewportView(time_volt_channelsPanel);

        channel_time_voltSplitPane.setLeftComponent(jScrollPane2);

        timeList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "时间道(ms)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 255))); // NOI18N
        timeList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(timeList);

        channel_time_voltSplitPane.setRightComponent(jScrollPane4);

        extractedChannelPanel.add(channel_time_voltSplitPane);

        lineSplitPanel.setRightComponent(extractedChannelPanel);

        linePanel.add(lineSplitPanel);

        saveImageMenuItem.setMnemonic(KeyEvent.VK_F);
        saveImageMenuItem.setText("文件(F)");

        savePicMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        savePicMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/pictrue16.png"))); // NOI18N
        savePicMenuItem.setText("图片(P)");
        savePicMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePicMenuItemActionPerformed(evt);
            }
        });
        saveImageMenuItem.add(savePicMenuItem);

        MenuBar.add(saveImageMenuItem);

        EditMenu.setMnemonic(KeyEvent.VK_S);
        EditMenu.setText("显示(S)");

        changeChartMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        changeChartMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/cycleRVD16.png"))); // NOI18N
        changeChartMenuItem.setText("VRD切换(C)");
        changeChartMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeChartMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(changeChartMenuItem);

        showProfileMapMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        showProfileMapMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/profiler16.png"))); // NOI18N
        showProfileMapMenuItem.setText("电阻率剖面(P)");
        showProfileMapMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showProfileMapMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(showProfileMapMenuItem);

        MenuBar.add(EditMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(linePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolbarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(linePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showProfileMapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showProfileMapButtonActionPerformed
        // TODO add your handling code here:
        if (TEMProcessingProgramWin.lineName != null) {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    final TEMShowingProfileMapWin profileWin = new TEMShowingProfileMapWin();
                    TEMShowingProfileMapWin.onlyOnceCalTempHorizonResis = false;
                    profileWin.setTitle(TEMProcessingProgramWin.lineName + "测线剖面图");
                    profileWin.pack();
                    ShowScope.setMidScope(profileWin);
                    profileWin.setVisible(true);
                    profileWin.profilerMap.getTempHorizonResis();
                }
            }).start();
        }
    }//GEN-LAST:event_showProfileMapButtonActionPerformed
    private void showProfileMapMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showProfileMapMenuItemActionPerformed
        // TODO add your handling code here:
        showProfileMapButtonActionPerformed(evt);
    }//GEN-LAST:event_showProfileMapMenuItemActionPerformed

    private void changeChartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeChartButtonActionPerformed
        // TODO add your handling code here
        //循环
        if (chartChangeNum == 0) {
            chartChangeNum++;
        } else if (chartChangeNum == 1) {
            chartChangeNum = 0;
        } else if (chartChangeNum == 2) {
            chartChangeNum = 0;
        }
//        //循环
//        if (chartChangeNum == 0) {
//            chartChangeNum++;
//        } else if (chartChangeNum == 1) {
//            chartChangeNum++;
//        } else if (chartChangeNum == 2) {
//            chartChangeNum = 0;
//        }
        
        //更新
        Component[] chartPanels = definedLinePanel.getComponents();
        ArrayList linePoints = new ArrayList();//必须是Arraylist
        linePoints = (ArrayList) TEMSourceData.lineName_XYList.get(TEMProcessingProgramWin.lineName);
        String fileName = "";
        for (int i = 0; i < chartPanels.length; i++) {
            fileName = TEMSourceData.xy_fileName.get(linePoints.get(i));
            ArrayList voltage_time = TEMSourceData.integrationValue.get(fileName);
            ((XYSeriesCollection) ((ChartPanel) chartPanels[i]).getChart().getXYPlot().getDataset()).removeAllSeries();
            if (chartChangeNum == 0) {
                //修改横纵标签名称
                XYPlot xyplot = ((ChartPanel) chartPanels[i]).getChart().getXYPlot();
                TEMXLogAxis x = (TEMXLogAxis) xyplot.getDomainAxis();
                NumberAxis y = (NumberAxis) xyplot.getRangeAxis();
                x.setLabel("Time( ms )");
                y.setLabel("Voltage( mV/AM2 )");
                y.setInverted(false);
                //设定颜色
                XYLineAndShapeRenderer xylineandshaperenderer = (XYLineAndShapeRenderer) xyplot.getRenderer();
                xylineandshaperenderer.setSeriesPaint(0, Color.RED);
                //添加数据
                XYSeriesCollection xyseriescollection = new XYSeriesCollection();
                TEMTime_Resis_VoltWin time_resis_rolt = new TEMTime_Resis_VoltWin(xyseriescollection);
                xyseriescollection.addSeries(time_resis_rolt.extractVolt_Time((ArrayList) voltage_time.get(0), (ArrayList) voltage_time.get(1)));
                ((ChartPanel) chartPanels[i]).getChart().getXYPlot().setDataset(xyseriescollection);
            } else if (chartChangeNum == 1) {
                XYSeriesCollection xyseriescollection = new XYSeriesCollection();
                //修改横纵标签名称
                XYPlot xyplot = ((ChartPanel) chartPanels[i]).getChart().getXYPlot();
                TEMXLogAxis x = (TEMXLogAxis) xyplot.getDomainAxis();
                NumberAxis y = (NumberAxis) xyplot.getRangeAxis();
                x.setLabel("Time( ms )");
                y.setLabel("Resistivity( ohm.m )");
                y.setInverted(false);
                //设定颜色
                XYLineAndShapeRenderer xylineandshaperenderer = (XYLineAndShapeRenderer) xyplot.getRenderer();
                xylineandshaperenderer.setSeriesPaint(0, Color.green);
                //添加数据
                TEMTime_Resis_VoltWin time_resis_rolt = new TEMTime_Resis_VoltWin(xyseriescollection);
                xyseriescollection.addSeries(time_resis_rolt.extractResis_Time((ArrayList) voltage_time.get(0), (ArrayList) voltage_time.get(1),
                        (ArrayList) voltage_time.get(2), (ArrayList) voltage_time.get(3), (ArrayList) voltage_time.get(4), (ArrayList) voltage_time.get(5), (ArrayList) voltage_time.get(6)));
                ((ChartPanel) chartPanels[i]).getChart().getXYPlot().setDataset(xyseriescollection);
            } else if (chartChangeNum == 2) {
                XYSeriesCollection xyseriescollection = new XYSeriesCollection();
                //修改横纵标签名称
                XYPlot xyplot = ((ChartPanel) chartPanels[i]).getChart().getXYPlot();
                TEMXLogAxis x = (TEMXLogAxis) xyplot.getDomainAxis();
                NumberAxis y = (NumberAxis) xyplot.getRangeAxis();
                x.setLabel("Resistivity( ohm.m )");
                y.setLabel("Depth( m )");
                y.setInverted(true);
                //设定颜色
                XYLineAndShapeRenderer xylineandshaperenderer = (XYLineAndShapeRenderer) xyplot.getRenderer();
                xylineandshaperenderer.setSeriesPaint(0, Color.BLUE);
                //添加数据
                TEMTime_Resis_VoltWin time_resis_rolt = new TEMTime_Resis_VoltWin(xyseriescollection);
                xyseriescollection.addSeries(time_resis_rolt.extractResis_Depth((ArrayList) voltage_time.get(0), (ArrayList) voltage_time.get(1),
                        (ArrayList) voltage_time.get(2), (ArrayList) voltage_time.get(3), (ArrayList) voltage_time.get(4), (ArrayList) voltage_time.get(5), (ArrayList) voltage_time.get(6)));
                ((ChartPanel) chartPanels[i]).getChart().getXYPlot().setDataset(xyseriescollection);
            }
        }
    }//GEN-LAST:event_changeChartButtonActionPerformed

    private void changeChartMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeChartMenuItemActionPerformed
        // TODO add your handling code here:
        changeChartButtonActionPerformed(evt);
    }//GEN-LAST:event_changeChartMenuItemActionPerformed

    private void savePicMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePicMenuItemActionPerformed
        // TODO add your handling code here:
        saveImageButtonActionPerformed(evt);
    }//GEN-LAST:event_savePicMenuItemActionPerformed

    private void saveImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageButtonActionPerformed
        // TODO add your handling code here:
        saveImage(time_volt_channelsPanel);
    }//GEN-LAST:event_saveImageButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_formWindowClosing
    public void saveImage(JPanel panel) {
        TEMImageFileFilter imageChooser = new TEMImageFileFilter();
        if (imageChooser.showSaveDialog(this) == TEMImageFileFilter.APPROVE_OPTION) {
            // 获取当前路径
            File currentDirectory = imageChooser.getCurrentDirectory();
            // 获取文件名
            String fileName = imageChooser.getSelectedFile().getName();
            String[] readFile = fileName.split("[.]");
            // 获取后缀名
            String suf = imageChooser.getSuf();
            // 组合保存路径
            String savePath = currentDirectory + "\\" + readFile[0] + "."
                    + suf;
            File imageMerge = new File(savePath);//监测是否有重复的
            if (imageMerge.exists()) {
                int count = JOptionPane.showConfirmDialog(this, "文件已存在,是否覆盖？", "文件存在", JOptionPane.OK_OPTION);
                if (count == 0) {
                    try {
                        // 将图片写到保存路径
                        exportOtherShapesImage(imageMerge, panel, suf);
                    } catch (Exception ie) {
                    }
                } else {
                    saveImage(panel);
                }
            } else {
                exportOtherShapesImage(imageMerge, panel, suf);
            }
        }
    }

    public boolean exportOtherShapesImage(File f, JPanel panel, String suffix) {
        Dimension imageSize = panel.getSize();
        BufferedImage image = new BufferedImage(imageSize.width, imageSize.height, BufferedImage.TYPE_INT_RGB);
        Graphics2D g = image.createGraphics();
        panel.paint(g);
        g.dispose();
        try {
            ImageIO.write(image, suffix, f);
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public void showLineVT_RT_RDChange(int chartNum) {
        if (chartNum == 0) {
            chartNum = 1;
        } else if (chartNum == 1) {
            chartNum = 2;
        } else if (chartNum == 2) {
            chartNum = 0;
        }
        ArrayList linePoints = new ArrayList();//必须是Arraylist
        linePoints = (ArrayList) TEMSourceData.lineName_XYList.get(TEMProcessingProgramWin.lineName);
        String fileName = "";
        for (int i = 0; i < linePoints.size(); i++) {
            fileName = TEMSourceData.xy_fileName.get(linePoints.get(i));
            ArrayList voltage_time = TEMSourceData.integrationValue.get(fileName);
            XYSeriesCollection xyseriescollection = new XYSeriesCollection();
            TEMTime_Resis_VoltWin time_resis_rolt = new TEMTime_Resis_VoltWin(xyseriescollection);
            //添加电阻率时间
            xyseriescollection.addSeries(time_resis_rolt.extractResis_Time((ArrayList) voltage_time.get(0), (ArrayList) voltage_time.get(1),
                    (ArrayList) voltage_time.get(2), (ArrayList) voltage_time.get(3), (ArrayList) voltage_time.get(4), (ArrayList) voltage_time.get(5), (ArrayList) voltage_time.get(6)));
            definedLinePanel.add(time_resis_rolt.createDemoPanel(fileName, "Time( ms )", "Resistivity( ohm.m )", "RT", xyseriescollection, true));
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu EditMenu;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JButton changeChartButton;
    private javax.swing.JMenuItem changeChartMenuItem;
    public javax.swing.JSplitPane channel_time_voltSplitPane;
    public javax.swing.JPanel definedLinePanel;
    private javax.swing.JPanel extractedChannelPanel;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel linePanel;
    private javax.swing.JSplitPane lineSplitPanel;
    private javax.swing.JToolBar lineToolBar;
    private javax.swing.JButton saveImageButton;
    private javax.swing.JMenu saveImageMenuItem;
    private javax.swing.JMenuItem savePicMenuItem;
    private javax.swing.JButton showProfileMapButton;
    private javax.swing.JMenuItem showProfileMapMenuItem;
    public javax.swing.JList timeList;
    public javax.swing.JPanel time_volt_channelsPanel;
    private javax.swing.JPanel toolbarPanel;
    // End of variables declaration//GEN-END:variables

    class CheckListCellRenderer extends JCheckBox implements ListCellRenderer {

        protected Border m_noFocusBorder = new EmptyBorder(1, 1, 1, 1);

        public CheckListCellRenderer() {
            super();
            setOpaque(true);
            setBorder(m_noFocusBorder);
        }

        public Component getListCellRendererComponent(JList list, Object value,
                int index, boolean isSelected, boolean cellHasFocus) {
            setText(value.toString());

            setBackground(isSelected ? list.getSelectionBackground() : list
                    .getBackground());
            setForeground(isSelected ? list.getSelectionForeground() : list
                    .getForeground());

            try {//防止出错
                InstallData data = (InstallData) value;
                setSelected(data.isSelected());
                setFont(list.getFont());
                setBorder((cellHasFocus) ? UIManager
                        .getBorder("List.focusCellHighlightBorder") : m_noFocusBorder);
            } catch (Exception e) {
            }
            return this;
        }
    }

    class CheckListener implements MouseListener, KeyListener {

//    protected JList m_parent;
        protected JList timeList;

        public CheckListener(JList timeList) {
            this.timeList = timeList;
        }

        public void mouseClicked(MouseEvent e) {
            doCheck();
        }

        public void mousePressed(MouseEvent e) {
        }

        public void mouseReleased(MouseEvent e) {
        }

        public void mouseEntered(MouseEvent e) {
        }

        public void mouseExited(MouseEvent e) {
        }

        public void keyPressed(KeyEvent e) {
            if (e.getKeyChar() == ' ') {
                doCheck();
            }
        }

        public void keyTyped(KeyEvent e) {
        }

        public void keyReleased(KeyEvent e) {
        }

        protected void doCheck() {
            int index = timeList.getSelectedIndex();
            if (index < 0) {
                return;
            }
            InstallData data = (InstallData) timeList.getModel().getElementAt(index);
            data.invertSelected();
            if (!data.isSelected()) {
                String timeName = data.getName();
                XYSeriesCollection xycollection = (XYSeriesCollection) channels_Time_VoltChart.getJfreechart().getXYPlot().getDataset();
//                XYSeries xyseries = xycollection.getSeries(timeName);//获得选择的时间点
                int count = xycollection.getSeriesCount();
                int indexTime = -1;
                for (int i = 0; i < count; i++) {
                    if (xycollection.getSeriesKey(i).equals(timeName)) {
                        indexTime = i;
                        //更新图例的个数
                        int legendCounts = channels_Time_VoltChart.getLegendCounts();
                        channels_Time_VoltChart.setLegendCounts(--legendCounts);
                        if (legendCounts >= 1) {
                            LabelBlock labelblock = new LabelBlock("图例(" + legendCounts + "个)\n(单位/ms)", new Font("宋体", Font.PLAIN, 10));
                            channels_Time_VoltChart.getBlockcontainer().clear();
                            channels_Time_VoltChart.getBlockcontainer().add(labelblock, RectangleEdge.TOP);
                            channels_Time_VoltChart.getBlockcontainer().add(channels_Time_VoltChart.getBlockcontainer1());
                        }
                        break;
                    }
                }
                //隐藏不显示的曲线
                channels_Time_VoltChart.getRenderer().setSeriesVisible(indexTime, false);
            } else {
                String timeName = data.getName();
                XYSeriesCollection xycollection = (XYSeriesCollection) channels_Time_VoltChart.getJfreechart().getXYPlot().getDataset();
//                XYSeries xyseries = xycollection.getSeries(timeName);//获得选择的时间点
                int count = xycollection.getSeriesCount();
                int indexTime = -1;
                for (int i = 0; i < count; i++) {
                    if (xycollection.getSeriesKey(i).equals(timeName)) {
                        indexTime = i;
                        //更新图例的个数
                        int legendCounts = channels_Time_VoltChart.getLegendCounts();
                        channels_Time_VoltChart.setLegendCounts(++legendCounts);
                        LabelBlock labelblock = new LabelBlock("图例(" + legendCounts + "个)\n(单位/ms)", new Font("宋体", Font.PLAIN, 10));
                        channels_Time_VoltChart.getBlockcontainer().clear();
                        channels_Time_VoltChart.getBlockcontainer().add(labelblock, RectangleEdge.TOP);
                        channels_Time_VoltChart.getBlockcontainer().add(channels_Time_VoltChart.getBlockcontainer1());
                        break;
                    }
                }
                //隐藏不显示的曲线
                channels_Time_VoltChart.getRenderer().setSeriesVisible(indexTime, true);
            }
            timeList.repaint();
        }
    }
}
