/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.geopen;

import handler.geopen.TEMSourceData;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;

/**
 *
 * @author Administrator
 */
public class LineNameToTreeDialog extends javax.swing.JDialog {

    TEMProcessingProgramWin frame;

    /**
     * Creates new form LineNameToTreeDialog
     */
    public LineNameToTreeDialog(TEMProcessingProgramWin parent, boolean modal) {
        super(parent, modal);
        this.frame = parent;
        initComponents();
        pack();
        Rectangle parentBounds = parent.getBounds();
        Dimension size = getSize();
        // Center in the parent
        int x = Math.max(0, parentBounds.x + (parentBounds.width - size.width) / 2);
        int y = Math.max(0, parentBounds.y + (parentBounds.height - size.height) / 2);
        setLocation(new Point(x, y));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lineNameTextField = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("自定义测线"));

        jLabel1.setText("测 线 名：");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lineNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lineNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        okButton.setText("确定");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("取消");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(cancelButton)
                .addGap(42, 42, 42))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cancelButton, okButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // TODO add your handling code here:
        //更新树列表
        String lineName = lineNameTextField.getText().trim();
        if (lineName.equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(this, "自定义测线名不能为空，请重新命名！");
            return;
        }
        if (frame.lineNode.getChildCount() != 0) {//判断测线名是否重复
            for (int i = 0; i < frame.lineNode.getChildCount(); i++) {
                if (lineName.equalsIgnoreCase(frame.lineNode.getChildAt(i).toString())) {
                    JOptionPane.showMessageDialog(this, "自定义测线名已存在，请重新命名！");
                    return;
                }
            }
        }
        //添加节点
        DefaultMutableTreeNode tempNode = new DefaultMutableTreeNode(new NodeData(DBObjectType.LINE, lineName));
        frame.lineNode.add(tempNode);
        //添加选点的坐标和测线名
        ArrayList<List> choicedDataPoints = new ArrayList<List>();
        if (TEMChartPanle.series2.getItemCount() != 0) {//点选择测线的时候
            int counts = TEMChartPanle.series2.getItemCount();
            for (int i = 0; i < counts; i++) {
                double x = TEMChartPanle.series2.getX(i).doubleValue();
                double y = TEMChartPanle.series2.getY(i).doubleValue();
                ArrayList<Double> xy = new ArrayList<Double>();
                xy.add(x);
                xy.add(y);
                choicedDataPoints.add(xy);
            }
        } else if (TEMChartPanle.series3.getItemCount() != 0) {//线选择测线的时候
            double startX = TEMChartPanle.series3.getX(0).doubleValue();
            double startY = TEMChartPanle.series3.getY(0).doubleValue();
            double endX = TEMChartPanle.series3.getX(1).doubleValue();
            double endY = TEMChartPanle.series3.getY(1).doubleValue();
            double intervalY = endY - startY;
            double intervalX = endX - startX;
            int counts = TEMChartPanle.series1.getItemCount();//所有测点的坐标
            if (intervalX == 0) {//测线沿着y轴
                for (int i = 0; i < counts; i++) {
                    if (TEMChartPanle.series1.getX(i).doubleValue() == startX) {//首先得和x坐标相同
                        if (TEMChartPanle.series1.getY(i).doubleValue() <= TEMChartPanle.series3.getMaxY()
                                && TEMChartPanle.series1.getY(i).doubleValue() >= TEMChartPanle.series3.getMinY()) {//不大于最大y轴坐标且不小于最小值
                            double x = TEMChartPanle.series1.getX(i).doubleValue();
                            double y = TEMChartPanle.series1.getY(i).doubleValue();
                            ArrayList<Double> xy = new ArrayList<Double>();
                            xy.add(x);
                            xy.add(y);
                            choicedDataPoints.add(xy);
                        }
                    }
                }
            } else if (intervalY == 0) {//测线沿着x轴
                for (int i = 0; i < counts; i++) {
                    if (TEMChartPanle.series1.getY(i).doubleValue() == startY) {//首先得和y坐标相同
                        if (TEMChartPanle.series1.getX(i).doubleValue() <= TEMChartPanle.series3.getMaxX()
                                && TEMChartPanle.series1.getX(i).doubleValue() >= TEMChartPanle.series3.getMinX()) {//不大于最大x轴坐标且不小于最小值
                            double x = TEMChartPanle.series1.getX(i).doubleValue();
                            double y = TEMChartPanle.series1.getY(i).doubleValue();
                            ArrayList<Double> xy = new ArrayList<Double>();
                            xy.add(x);
                            xy.add(y);
                            choicedDataPoints.add(xy);
                        }
                    }
                }
            } else {//倾斜
                double slopRate = intervalY / intervalX;
                double maxX = TEMChartPanle.series3.getMaxX();
                double minX = TEMChartPanle.series3.getMinX();
                double maxY = TEMChartPanle.series3.getMaxY();
                double minY = TEMChartPanle.series3.getMinY();
                for (int i = 0; i < counts; i++) {
                    double x = TEMChartPanle.series1.getX(i).doubleValue();
                    double y = TEMChartPanle.series1.getY(i).doubleValue();
                    if (x <= maxX && x >= minX) {//包含在x最大最小值范围内 
                        if (y <= maxY && y >= minY) {//包含在Y最大最小值范围内 
                            double temp_intervalY = y - minY;
                            double temp_intervalX = x - minX;
                            if (temp_intervalY != 0 && temp_intervalX != 0) {//不包括测线最小值端的测点
                                double temp_ratio = temp_intervalY / temp_intervalX;
                                if (temp_ratio == slopRate) {
                                    ArrayList<Double> xy = new ArrayList<Double>();
                                    xy.add(x);
                                    xy.add(y);
                                    choicedDataPoints.add(xy);
                                }
                            } else if (temp_intervalY == 0 && temp_intervalX == 0) {
                                ArrayList<Double> xy = new ArrayList<Double>();
                                xy.add(x);
                                xy.add(y);
                                choicedDataPoints.add(xy);
                            }
                        }
                    }
                }
            }
        }
        TEMSourceData.lineName_XYList.put(lineName, choicedDataPoints);//测线名和数据点坐标一一对应
        TEMSourceData.lineName.add(lineName);//赋值测线名
        //展开树
        frame.SelectedDataTree.collapseRow(1);//自动展开测点节点自定义测线
        frame.SelectedDataTree.expandRow(2);//自动展开测点节点自定义测线
        frame.SelectedDataTree.updateUI();//更新
        //设置完退出
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField lineNameTextField;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
}
